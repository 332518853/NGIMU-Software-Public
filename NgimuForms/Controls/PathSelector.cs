using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using NgimuForms.DialogsAndWindows;

namespace NgimuForms.Controls
{
    public partial class PathSelector : UserControl
    {
        public enum PathSelectorType
        {
            OpenFile,
            SaveFile,
            SelectDirectory,
        };

        private PathSelectorType selectorType;

        [DefaultValue(false)]
        public bool AllowMultiplePaths { get; set; }

        public string DialogTitle { get; set; }

        /// <summary>
        /// Gets or sets the current file name filter string, which determines the choices that appear in the "Save as file type" or "Files of type" box in the dialog box.
        /// </summary>
        /// <remarks>
        /// For each filtering option, the filter string contains a description of the filter, followed by the vertical bar (|) and the filter pattern. The strings for different filtering options are separated by the vertical bar.
        /// The following is an example of a filter string:
        /// Text files(*.txt)|*.txt|All files(*.*)|*.*
        /// You can add several filter patterns to a filter by separating the file types with semicolons, for example:
        /// Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files(*.*)|*.*
        /// Use the FilterIndex property to set which filtering option is shown first to the user.
        /// </remarks>
        /// <value>The filter.</value>
        [DefaultValue("All files(*.*)|*.*")]
        public string Filter { get; set; } = "All files(*.*)|*.*";

        /// <summary>
        /// Gets or sets the index of the filter currently selected in the file dialog box.
        /// </summary>
        /// <value>The index of the filter.</value>
        /// <remarks>Use the FilterIndex property to set which filtering option is shown first to the user. You can also use the value of FilterIndex after showing the file dialog to perform special file operations depending upon the filter chosen.</remarks>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for FilterIndex
        [DefaultValue(1)]
        public int FilterIndex { get; set; } = 1;

        public string HelpText { get { return textbox.HelpText; } set { textbox.HelpText = value; } }

        public Color HelpTextColor { get { return textbox.HelpTextColor; } set { textbox.HelpTextColor = value; } }

        public string SelectedPath { get { return textbox.Text; } set { textbox.Text = value; } }

        [DefaultValue(PathSelectorType.OpenFile)]
        public PathSelectorType SelectorType
        {
            get
            {
                return selectorType;
            }

            set
            {
                selectorType = value;

                switch (selectorType)
                {
                    case PathSelectorType.OpenFile:
                        textbox.AutoCompleteSource = AutoCompleteSource.FileSystem;
                        textbox.AutoCompleteMode = AutoCompleteMode.Suggest;
                        break;

                    case PathSelectorType.SaveFile:
                        textbox.AutoCompleteSource = AutoCompleteSource.FileSystem;
                        textbox.AutoCompleteMode = AutoCompleteMode.Suggest;
                        break;

                    case PathSelectorType.SelectDirectory:
                        textbox.AutoCompleteSource = AutoCompleteSource.FileSystemDirectories;
                        textbox.AutoCompleteMode = AutoCompleteMode.Suggest;
                        break;

                    default:
                        break;
                }
            }
        }

        public PathSelector()
        {
            InitializeComponent();
        }

        private static void AddFiles(string[] paths, List<string> resolvedFiles)
        {
            foreach (string path in paths)
            {
                if (Directory.Exists(path) == true)
                {
                    AddFiles(Directory.GetFiles(path), resolvedFiles);

                    AddFiles(Directory.GetDirectories(path), resolvedFiles);
                }
                else
                {
                    resolvedFiles.Add(path);
                }
            }
        }

        private void browseButton_Click(object sender, EventArgs e)
        {
            switch (SelectorType)
            {
                case PathSelectorType.OpenFile:
                    ShowOpenFileDialog();
                    break;

                case PathSelectorType.SaveFile:
                    ShowSaveFileDialog();
                    break;

                case PathSelectorType.SelectDirectory:
                    ShowDirectorySelectionDialog();
                    break;

                default:
                    break;
            }
        }

        private string CreateMultiPathString(string[] fileNames)
        {
            StringBuilder sb = new StringBuilder();

            bool first = true;
            foreach (string fileName in fileNames)
            {
                if (first == false)
                {
                    sb.Append(";");
                }

                sb.Append(fileName);

                first = false;
            }

            return sb.ToString();
        }

        private string GetLastValidPath()
        {
            string fullString = textbox.Text;

            if (fullString.IndexOf(';') == -1)
            {
                return fullString.Trim();
            }

            string[] pathParts = fullString.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

            for (int i = pathParts.Length - 1; i >= 0; i--)
            {
                if (string.IsNullOrEmpty(pathParts[i].Trim()) == true)
                {
                    continue;
                }

                return pathParts[i].Trim();
            }

            return "";
        }

        private void ShowDirectorySelectionDialog()
        {
            using (FolderBrowserDialog folderBrowserDialog1 = new FolderBrowserDialog())
            {
                folderBrowserDialog1.ShowNewFolderButton = true;
                folderBrowserDialog1.RootFolder = Environment.SpecialFolder.Desktop;
                folderBrowserDialog1.Description = DialogTitle;

                string lastPath = GetLastValidPath();

                if (Directory.Exists(lastPath) == true)
                {
                    folderBrowserDialog1.SelectedPath = lastPath;
                }

                if (FolderBrowserLauncher.ShowFolderBrowser(folderBrowserDialog1, this) != System.Windows.Forms.DialogResult.OK)
                {
                    return;
                }

                textbox.Text = folderBrowserDialog1.SelectedPath;
            }
        }

        private void ShowOpenFileDialog()
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = Filter;
                openFileDialog.FilterIndex = FilterIndex;
                openFileDialog.Title = DialogTitle;
                openFileDialog.Multiselect = AllowMultiplePaths;

                string lastPath = GetLastValidPath();

                if (File.Exists(lastPath) == true)
                {
                    FileInfo fileInfo = new FileInfo(lastPath);

                    openFileDialog.InitialDirectory = fileInfo.Directory.FullName;
                    openFileDialog.FileName = fileInfo.Name;
                }
                else if (Directory.Exists(lastPath) == true)
                {
                    openFileDialog.InitialDirectory = lastPath;
                    openFileDialog.FileName = "";
                }

                if (openFileDialog.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                if (AllowMultiplePaths == false)
                {
                    textbox.Text = openFileDialog.FileName;
                }
                else
                {
                    textbox.Text = CreateMultiPathString(openFileDialog.FileNames);
                }
            }
        }

        private void ShowSaveFileDialog()
        {
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = Filter;
                saveFileDialog.FilterIndex = FilterIndex;
                saveFileDialog.Title = DialogTitle;

                string lastPath = GetLastValidPath();

                if (File.Exists(lastPath) == true)
                {
                    FileInfo fileInfo = new FileInfo(lastPath);

                    saveFileDialog.InitialDirectory = fileInfo.Directory.FullName;
                    saveFileDialog.FileName = fileInfo.Name;
                }
                else if (Directory.Exists(lastPath) == true)
                {
                    saveFileDialog.InitialDirectory = lastPath;
                    saveFileDialog.FileName = "";
                }

                if (saveFileDialog.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                textbox.Text = saveFileDialog.FileName;
            }
        }

        private void textbox_DragDrop(object sender, DragEventArgs e)
        {
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

            List<string> resolvedFiles = new List<string>();

            if (SelectorType == PathSelectorType.OpenFile ||
                SelectorType == PathSelectorType.SaveFile)
            {
                AddFiles(files, resolvedFiles);
            }
            else
            {
                foreach (string path in files)
                {
                    if (Directory.Exists(path) == false)
                    {
                        continue;
                    }

                    resolvedFiles.Add(path);
                }
            }

            if (AllowMultiplePaths == true)
            {
                textbox.Text = CreateMultiPathString(resolvedFiles.ToArray());
            }
            else if (resolvedFiles.Count > 0)
            {
                textbox.Text = resolvedFiles[0];
            }
        }

        private void textbox_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.Copy;
            }
        }

        private void textbox_TextChanged(object sender, EventArgs e)
        {
        }
    }
}